GITHUB ACTIONS

01 - Construcciones automáticas
-------------------------------
  GitHub Actions nos permite crear un pipeline, una serie de procesos que vamos a poder ejecutar en secuencia
  para llegar a un objetivo en particular.

  Código --> Dockerfile --> GitHub --> Action --> Determina el tag --> Build en GitHub --> Push a un registro private en DockerHub

  Y todo esto se hace a partir de un commit.

02 - Inicio de proyecto
-----------------------
  Vamos a trabajar con el proyecto 12-graphql-actions

  - Ejecutamos para instalar dependencias
      yarn install
  - Ejecutamos para echar a andar el proyecto
      yarn start:dev
  - Vamos a la ruta
      localhost:3000/graphql

  - Una vez vista un poco la ejecución de la app, borrar las carpetas
      node_modules
      dist

  La idea es, mediante un comando git (commit), lanzar el procedimiento de construcción de nuestra imagen y llevarla a DockerHub.
  También vamos a hacer que maneje el versionamiento semántico por nosotros. 

03 - Github - Repositorio de proyecto
-------------------------------------
  Nos llevamos el proyecto 12-graphql-actions a un repositorio aparte para poder trabajar con los Github Actions.

  - El repositorio es este:
      https://github.com/JoseManuelMunozManzano/docker-actions

  - En nuestro ordenador también me he llevado el proyecto a otra carpeta (00-Proyectos - GitHubActions)
  - Abrimos el proyecto en VSCode y nos vamos a la terminal
  - Iniciamos git
      git init
  - Tomamos el proyecto y lo llevamos al staging
      git add .
  - Hacemos el commit
      git commit -m "First commit"

  - Pegamos los comandos que nos indica Github en nuestra terminal y ejecutamos para hacer el push
      git remote add origin https://github.com/JoseManuelMunozManzano/docker-actions.git
      git branch -M main
      git push -u origin main

  - Solo para ir viendo, en Github, en nuestro repositorio del proyecto, pulsamos en la pestaña Actions  
  - Debemos ver Docker image By Github Actions

04 - Configurar credenciales - Github Secrets
---------------------------------------------
  - En Github, en el repositorio de nuestro proyecto pulsar el botón Settings    
  - Pulsar en Secrets and variables
  - Pulsar en Actions
  - Vamos a crear Repository secrets. Son variables ocultas que solo Github va a conocer. Una vez las creemos
    ni nosotros mismos vamos a poder verlas de nuevo.
    Las llaves que vamos a querer grabar es mi nombre de usuario de Dockerhub

    Para ello pulsar el botón New repository secret y la secret es:
      DOCKER_USER
    Y el valor será el nombre de nuestro usuario en DockerHub.
    Cuando indiquemos el valor pulsamos el botón Add secret

    Pulsamos de nuevo el botón New repository, y la segunda secret es:
      DOCKER_PASSWORD
    Y de nuevo indicaremos el valor (un token de acceso creado en DockerHub) y pulsaremos el botón Add secret.

    Para crear el Token en DockerHub, en nuestra cuenta de DockerHub acceder a Account Settings, luego a
    Security y pulsar el botón New Access Token e indicamos un descriptivo, en nuestro caso
    Github-Actions. Daremos los permisos Read & Write. Pulsamos el botón Generate.
    Nos saldrá un token y lo copiamos porque una vez salgamos ya no lo vamos a poder volver a ver.
    Ese token es como un password.

    IMPORTANTE: Los nombres de las keys podrían haber sido otros, no obligatoriamente esos.

  - Volvemos a DockerHub y creamos un repositorio. Lo vamos a hacer privado esta vez.
    Le damos el nombre: 
      docker-graphql
    Y pulsamos el botón Create.

05 - Primeros pasos de Github Actions
-------------------------------------
  - En nuestro repositorio de Github, pulsar en Actions y buscar Docker image.
    Nos interesa la que en su descripción indica: 
      Build a Docker image to deploy, run, or push to a registry.

  - Una vez encontrado pulsar el botón Configure y veremos un fichero llamado docker-image.yml

    NOTA: Sobre GitHub Actions ver en mi Github el repositorio
      https://github.com/JoseManuelMunozManzano/udemy-gh-07-containers
    Y todos los demás repositorios cuyo nombre empiece por: udemy-gh
  
  - Pulsamos el botón Start commit o Commit changes
    Con esto, en nuestro repositorio se crea una carpeta oculta .github/workflows que contiene 
    el fichero docker-image.yml
  
  - Automáticamente intentará ejecutar la acción (pulsar en Actions) y fallará (se puede cancelar)
    La idea es simplemente implementarlo, no que funcione todavía.

06 - Crear imagen
-----------------

  - En nuestro proyecto de nuestro ordenador, en nuestro Dockerfile ya tenemos todo el procedimiento
    de construcción.

  - Para hacer el build de la imagen con el nombre: neimerc/docker-graphql:0.0.1
      docker build -t neimerc/docker-graphql:0.0.1 .

  - Y para probarlo creamos el contenedor
      docker container run -d neimerc/docker-graphql:0.0.1
  
  - Y vamos al navegador a la ruta
      localhost:3000/graphql
