48 - Deployments y registros - Introducción
-------------------------------------------
  Para desplegar la imagen vamos a necesitar la BD y tenemos que aprovisionarla en algún servicio 
  como Digital Ocean, Azure, AWS...
  Luego nuestra imagen de Teslo-Shop la vamos a conectar a esa BD mediante variables de entorno.
  Vamos a hacer protecciones a la BD (solo ciertas direcciones IP o solo conexiones internas). Entre
  menos puntos de acceso tenga nuestra BD menos posibilidades de que nos hackeen.

  Lo que vamos a hacer en esta sección es:
  - Desplegar la imagen, y esto lo vamos a hacer de dos maneras. Uno en Docker Hub y luego vamos a tener
    un registro, que sería como un espejo de Docker Hub pero privado y en plataformas como Digital Ocean, Azure...

49 - Construcción de imagen - Múltiples arquitecturas
-----------------------------------------------------
  Vamos a seguir trabajando en el proyecto 10-teslo-shop

  Primero vamos a crear la imagen en distintas arquitecturas. Para ello usaremos buildx.

  - Listar builders existentes
      docker buildx ls

  - Crear un nuevo buildx
      docker buildx create --name mybuilder --driver docker-container --bootstrap

  - Para cambiar al buildx que hemos creado ejecutar:
      docker buildx use mybuilder

  - Acceder a Docker Hub e ingresar en nuestra cuenta.
      https://hub.docker.com/
  - Pulsar el botón Create repository
  - Darle un nombre al repositorio.
      teslo-shop
  - Dar una descripción (opcional)
  - Indicar si la visibilidad es pública o privada.
  - Se puede conectar a GitHub o BitBucket para automatizar procesos.
  - Pulsar el botón Create

  - Creamos las imágenes en las distintas plataformas. Recordar que el push ya sube a Docker Hub.
      docker buildx build --platform linux/amd64,linux/arm64 -t neimerc/teslo-shop:1.0.0 --push .

  - Igual para el latest
      docker buildx build --platform linux/amd64,linux/arm64 -t neimerc/teslo-shop --push .

  - Una vez hemos terminado de crear la imagen en las plataformas echamos abajo el contenedor
      docker container rm -f 5eb

  - Eliminamos el builder. Tenemos que cambiar a otro builder y luego borrarlo.
      docker buildx use desktop-linux
      docker buildx rm mybuilder

50 - Tablas en Markdown
-----------------------
  Este punto es para Docker Hub, para crear un README usando Markdown.

  - Documentación de la sintaxis de Markdown
      https://www.markdownguide.org/basic-syntax/

  - Acceder a Docker Hub y a nuestra imagen teslo-shop, en la pestaña general
      https://hub.docker.com/repository/docker/neimerc/teslo-shop/general

  - Donde aparece el texto Repository Overview pulsar Edit.

  - Vamos a usar una tabla. Cuando escribamos esto pulsamos el botón Update. También podemos
    pulsar en Preview para ver como va quedando.

# TesloShop Backend

| Variable de entorno | Ejemplo | Descripción |
| --- | --- | --- |
APP_VERSION | 1.0.1 | Versión de la aplicación
STAGE | prod | prod, dev, staginng
DB_PASSWORD | my_password | Password de la BD Postgres
DB_NAME | TesloDB | Nombre de la BD
DB_HOST | TesloDB | Host donde se encuentra la BD
DB_PORT | 5432 | Puerto de la BD
DB_USERNAME | postgres | Usuario de la BD
PORT | 3000 | Puerto donde corre la aplicación http
HOST_API | http://localhost:3000/api | Path donde se encuentra el api
JWT_SECRET | my_secret | Secret de nuestros JWTs

  - Para ver como la gente lo verá pulsamos el botón Public View

51 - Prueba de la imagen creada
-------------------------------
Vamos a trabajar en el proyecto 11-teslo-testing

  - Creamos de nuevo el fichero docker-compose.yml
    Vemos que se indica la imagen de Docker Hub que ya hemos subido anteriormente.

version: '3'

services:
  app:
    # siempre indicar un tag
    image: neimerc/teslo-shop:1.0.0
    depends_on:
      - db
    restart: always
    container_name: teslo-backend
    ports:
      - ${PORT}:${PORT}
    environment:
      APP_VERSION: ${APP_VERSION}
      STAGE: ${STAGE}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      PORT: ${PORT}
      HOST_API: ${HOST_API}
      JWT_SECRET: ${JWT_SECRET}

  db:
    image: postgres:14.3
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    container_name: ${DB_NAME}
    volumes:
      - postgres-db:/var/lib/postgresql/data

volumes:
  postgres-db:
    external: false

  - Levantamos nuestro contenedor:
      docker compose up

  - Vamos al navegador web y escribimos
      localhost:3000/api
    
    Y veremos el Swagger

  Se va a hacer ahora el aprovisionamiento para desplegar la BD en la nube, para poder decirle
  después a nuestra imagen cual es la cadena de conexión de la BD.

52 - Digital Ocean - Aprovisionamiento de BD
--------------------------------------------
  https://www.digitalocean.com/

  Vamos a aprovisionar una BD Postgres para que nosotros, mediante nuestras variables de entorno, podamos conectar nuestra imagen.

  Esto no lo voy a hacer, al menos por ahora (clases 85 a 94 de la Sección 7)
