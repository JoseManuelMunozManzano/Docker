39. Multi-stage build
---------------------
  Imaginemos este escenario en un fichero Dockerfile. Tenemos los siguientes bloques que están todos juntos:
    - Comandos para instalar las dependencias
    - Ejecutar test
    - Hacer el build
    - Ejecutar la aplicación
  
  Tal y como hemos estado haciendo el fichero Dockerfile, si un pequeño cambio sucede en la parte de instalar 
  las dependencias, todo lo que sigue después de ese cambio se va a tener que volver a reconstruir, evaluar y
  ejecutar aunque esas otras partes no han cambiado nada.

  La idea del multi-stage es tomar los bloques anteriores y crear pequeñas imágenes temporales que se encargan 
  de una sola tarea y cuyo objetivo final es construir la imagen que nosotros queremos.
  En concreto, podemos tener las siguientes etapas:
    - Stage con todas las dependencias (en nuestra app solo package.json)
    - Stage con el testing y el build (suelen estar juntos porque si cambia el código tenemos que hacer el
      testing y el build)
    - Stage para ejecutar las dependencias de producción
    - Stage para construir propiamente la imagen de nuestra aplicación

  Estas imágenes temporales pueden compartir información, porque son independientes entre si y completamente
  aisladas.
  Por ejemplo, al instalar las dependencias de los paquetes de Node en el primer stage, tendremos que moverlos
  al stage siguiente de testing y build.
  El objetivo del build es crear la carpeta dist con nuestro código fuente. Pues esa carpeta dist la pasaremos
  al stage siguiente de ejecución de dependencias de Pro.

  Y al final, solo exportamos la última imagen, con lo que el tamaño será menor.

  De esta forma, la parte que no cambia no tiene que hacer absolutamente nada, ya estén en cache y se reutilizan.

40. Proyecto
------------
  Vamos a seguir el proyecto en la carpeta: 09-cron-ticker-multi-stage

41. Multi-State Build (o Multi-Stage Build)
-------------------------------------------
  - Documentación:
      https://phoenixnap.com/kb/docker-add-vs-copy
      https://docs.docker.com/engine/reference/builder/#copy

    Se aconseja más trabajar con COPY para evitar efectos secundarios.

  - Nuestro primer stage instala dependencias y va a ser conocido como deps.
    Fichero Dockerfile queda así:

FROM node:19.2-alpine3.16 as deps
WORKDIR /app
COPY package.json ./
RUN npm install

  - Nuestra segundo stage va a testear y construir la app y lo vamos a llamar builder
    Si el testing falla ya no sigue con los siguientes stages.
    Debajo de lo anterior, en nuestro fichero Dockerfile, añadimos:

FROM node:19.2-alpine3.16 as builder
WORKDIR /app
# Copiamos del stage deps los node_modules al stage builder en la carpeta ./node_modules
COPY --from=deps /app/node_modules ./node_modules
# Dest /app
COPY . .
# Realizar testing
RUN npm run test
# Aquí haríamos para construir la app optimizada para producción:
# RUN npm run build
# Pero no hace falta porque en nuestra app no tenemos ese script.

  - El tercer stage crear las dependencias de producción.
    Debajo de lo anterior, en nuestro fichero Dockerfile, añadimos:

FROM node:19.2-alpine3.16 as prod-deps
WORKDIR /app
COPY package.json ./
RUN npm install --prod

  - El cuarto stage ejecuta la aplicación y lo llamaremos runner
    Debajo de lo anterior, en nuestro fichero Dockerfile, añadimos:

FROM node:19.2-alpine3.16 as runner
WORKDIR /app
COPY --from=prod-deps /app/node_modules ./node_modules
# Copiar los fuentes que necesito
# Si tuviese una carpeta dist con los fuentes ya optimizados, copiaría solo ese directorio.
COPY app.js ./
COPY tasks ./tasks
# Ejecutar comandos cuando se inicia un contenedor
CMD [ "node", "app.js" ]

  - Creamos la imagen usando nuestro fichero Dockerfile
      docker build --tag neimerc/cron-ticker:perro .

  - Y el latest
      docker build --tag neimerc/cron-ticker:latest .

  - Montamos el contenedor y vemos si funciona.
      docker container run neimerc/cron-ticker

  - Subir imagenes
      docker push neimerc/cron-ticker:perro
      docker push neimerc/cron-ticker:perro

42. Build con otras arquitecturas
---------------------------------
  De nuevo vamos a usar buildx para construir nuestra imagen en varias arquitecturas.
  Para más documentación ver 00 - 03 - Dockerfile.txt, puntos 37 y 38.

  - Ver los builders disponibles.
      docker buildx ls

  - Crear un nuevo buildx
      docker buildx create --name mybuilder --driver docker-container --bootstrap

  - Para cambiar al buildx que hemos creado:
      docker buildx use mybuilder

  - Crear la imagen en las distintas plataformas
      docker buildx build --platform linux/amd64,linux/arm64 -t neimerc/cron-ticker:gato --push .

  - Inspeccionar la imagen para ver las diferentes plataformas creadas
      docker buildx imagetools inspect neimerc/cron-ticker:gato
  
  - No olvidar el latest
      docker buildx build --platform linux/amd64,linux/arm64 -t neimerc/cron-ticker --push .

  - Eliminar el builder. Tenemos que cambiar a otro builder y luego borrarlo.
      docker buildx use desktop-linux
      docker buildx rm mybuilder

43. Nuevo Proyecto
------------------
  Vamos a seguir el proyecto de la carpeta: 10-teslo-shop

  La idea de este proyecto es mezclar el docker compose con el build del Dockerfile.

  - En el punto en el que está solo hay que levantarlo de la siguiente manera (ver README.md)
      docker compose up -d
      yarn start:dev

  - Ejecutar el seed
      http://localhost:3000/api/seed
  
  - Ver la información en Swagger
      http://localhost:3000/api
  
  - Para terminar echar abajo el docker compose
      docker compose down --volumes

44. Docker compose - Target State
---------------------------------
  Ver dentro del proyecto los ficheros Dockerfile y docker-compose.yml

  - Se ha informado esta parte dentro del docker-compose

app:
  volumes:
    - .:/app/
  container_name: nest-app
  ports:
    - ${PORT}:${PORT}
  environment:
    APP_VERSION: ${APP_VERSION}
    STAGE: ${STAGE}
    DB_PASSWORD: ${DB_PASSWORD}
    DB_NAME: ${DB_NAME}
    DB_HOST: ${DB_HOST}
    DB_PORT: ${DB_PORT}
    DB_USERNAME: ${DB_USERNAME}
    PORT: ${PORT}
    HOST_API: ${HOST_API}
    JWT_SECRET: ${JWT_SECRET}

  - Y ahora lo queremos ejecutar para levantar un contenedor.
      docker compose up
    
    Y vemos que da el siguiente error:
      service "app" has neither an image nor a build context specified: invalid compose project

    Este error es porque con docker compose levantamos un contenedor, pero es que NO TENEMOS IMAGEN.
    Lo que necesitamos hacer es que, al ejecutar docker-compose, haga un paso similar a este del fichero Dockerfile

FROM node:19-alpine3.15 as builder
WORKDIR /app
COPY --from=dev-deps /app/node_modules ./node_modules
COPY . .
RUN yarn build

CMD [ "node","dist/main.js"]

45. Ejecutar partes específicas del Dockerfile
----------------------------------------------
  Lo que queremos es seguir desarrollando nuestra app, en concreto, ejecutar usando Docker
  nuestro yarn start:dev
  NO QUEREMOS TODAVIA GENERAR UNA IMAGEN DE PRODUCCION!

  - Se ha borrado de nuestro proyecto la carpeta dist y la carpeta node_modules.

  - Se añade al fichero docker-compose, en el service app de arriba, lo siguiente:

    * context: es donde se va a buscar el archivo Dockerfile
    * target: del Dockerfile que parte va a ejecutar
    * dockerfile: es el nombre del fichero Dockerfile. Puede haber más de uno (dev, prod...)
      También puede haber más de un docker-compose.yml
      Aunque lo que estamos viendo es mejor, porque vamos a poder ejecutar solo ciertos
      segmentos de nuestro Dockerfile.
    * command: El comando a ejecutar. Puede estar aquí o en Dockerfile
      Lo vamos a dejar en el Dockerfile.
    * Se añade un nuevo volumen anónimo porque vamos a construir los node_modules usando nuestro 
      fichero Dockerfile y tenemos que mapearlos.
      El host no tendrá nada, es anónimo, es decir, la carpeta node_modules en
      nuestra máquina estará vacía.

app:
  build:
    context: .
    target: dev
    dockerfile: Dockerfile

    # command: yarn start:dev
    volumes:
      - .:/app/
      - /app/node_modules
    
    ...
  
  - Y en nuestro archivo Dockerfile, como hemos dicho que no queremos generar la imagen de producción
    vamos a crear una nueva layer cuya misión es ejecutar yarn start:dev
    Ver que arriba hemos hecho referencia en el target al alias dev de aquí.
    NOTA: Ver como generamos los módulos de Node y por eso tuvimos que mapearlos en el paso anterior.

FROM node:19-alpine3.15 as dev
WORKDIR /app
COPY package.json ./
RUN yarn install
# El comando a ejecutar puede ponerse aquí o en docker-compose.yml
# Lo vamos a dejar aquí porque en el paso de desarrollo SIEMPRE vamos a querer ejecutarlo
CMD [ "yarn","start:dev"]

  - Construir la imagen de desarrollo
      docker compose build
    
    Con este comando ejecutamos el docker-compose y la parte del fichero Dockerfile etiquetada como dev.

    Se ha debido de crear la imagen 
      10-teslo-shop-app:latest
  
  - Levantar nuestro contenedor
      docker compose up

    Esto vuelve a generar las carpetas dist y node_modules, que parece que están vacíos, 
    pero es porque realmente están en nuestra imagen.

    Sin embargo, vemos que el comando falla porque no puede encontrar la BD.
    En concreto está rechazando la conexión a 127.0.0.1, que es el localhost del contenedor.
    Pero es que la BD no está en el contenedor de la app.
    La BD esta en su propio contenedor que se llama TesloDB.

    Si nos vamos a nuestras variables de entorno, fichero .env veremos que el DB_HOST es localhost.
    Lo cambiamos a TesloDB, que es el entorno que necesito.

  - Con la variable de entorno DB_HOST corregido, volvemos a levantar nuestro contenedor
      docker compose up

    Ahora vemos que ya no falla
  
  - Vamos al navegador web
      localhost:3000/api
    
    Y deberíamos ver el Swagger.

  - Pulsamos Ctrl+C para salir del proyecto
  
  - Y siempre que queramos podemos volver a hacer el buid
      docker compose build

  - Echamos abajo nuestro docker compose cuando hayamos acabado
      docker compose down --volumes

  Para el punto 47.
  Lo que vamos a hacer luego es tomar las instrucciones del fichero docker-compose.yml y generar
  el build de producción basado en una variable de entorno.
  Es decir, en el fichero .env existe una variable llamada STAGE con valor dev.
  Lo que haremos es cambiar ese valor a prod.

46. Probar el BindVolume desde el compose
-----------------------------------------
  - Levantamos nuestro docker compose
      docker compose up

  - Recordar que el bind volume evita que toda esa capa se mantenga en cache.

  - Indicar que para hacer el desarrollo es mejor evitar el bind volumes hasta donde sea posible.
  
  - Los bind volumes son muy útiles cuando tenemos node-sass o sass y todo funciona bien en 
    nuestra máquina pero cuando lo pasamos a producción o una imagen de Linux no funciona.
    Estos bind volumes son muy útiles para hacer esas pruebas.

  - Pulsamos Ctrl+C para salir del proyecto

  - Echamos abajo nuestro docker compose cuando hayamos acabado
      docker compose down --volumes
