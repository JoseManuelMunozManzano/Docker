Nginx

01 - Inicio de Proyecto - SPA nginx
-----------------------------------
  - Vamos a trabajar en el proyecto SPA de React siguiente
      13-react-heroes

    En este proyecto no hay nada del lado del servidor.
    Nginx es muy útil para desplegar sitios estáticos.

  - Vamos a ver el funcionamiento del proyecto.
  - Ir a la terminal y a nuestro proyecto.
  - Instalar dependencias
      yarn
  - Montar el localhost en el puerto 3000
      yarn dev
  - Ejecutar el navegador y acceder a la ruta
      localhost:3000
  - Pulsamos en el botón login y entramos a nuestra app.

  - De nuevo en nuestro terminal, para hacer el build y generar la carpeta dist
      yarn build

    Si entramos a la carpeta build veremos que no hay nada de Node, sino básicamente
    un sitio web (index.html) con un código js (en React)

    Lo que nosotros debemos desplegar es esa carpeta dist y la carpeta assets

02 - nginx - DockerHub
----------------------
  - Ir a DockerHub y buscar la imagen oficial de nginx
      https://hub.docker.com/_/nginx
  
    Es la imagen más descargada de DockerHub.
    Aunque sirve para muchas cosas nosotros la vamos a usar como un hosting.
    Esto es porque estamos buscando que nuestra aplicación del frontend y nuestro backend
    estén en servidores aislados e independientes.
    De esa manera, si queremos hacer un cambio en el backend lo hacemos solo en el backend
    e igual para la parte de frontend.
    Así nos ahorramos momentos en los que la aplicación no va a estar disponible, etc.

  - Descargar la imagen y hacer correr el contenedor con este comando que aparece en la 
    documentación de la imagen indicada arriba.
      docker run --name some-nginx -d -p 8080:80 nginx:1.23.3

  - Para ver la ejecución de nginx ir al navegador, a la ruta
      localhost:8080

  - Dejar la imagen corriendo, porque en el siguiente punto vamos a ver lo que hay
    en el siguiente path del contenedor
      /usr/share/nginx/html
    
    Ese path es el volumen, en el cual compartimos nuestro contenido con el servidor web nginx.

03 - Inspeccionar nginx
-----------------------
  Con el contenedor de nginx corriendo, vamos a entrar con la terminal interactiva para examinar
  esa estructura de directorios.

  - Entrar a la terminal del contenedor
      docker exec -it a88 bash
  
  - Ya dentro del contenedor, acceder a la ruta siguiente
      cd usr/share/nginx/html
  
  - Ver los archivos
      ls

    Veremos que hay dos archivos:
      * 50x.html : Lo que mostraremos si hay un error interno del servidor. Hay una configuración
        interna dentro de nginx que dice que errores se quieren manejar y si ocurre uno de esos
        errores se indica que archivo .html queremos regresar.
      * index.html : Ver su contenido con el comando 
          cat index.html
        Si hacemos un cambio en ese archivo y recargamos el navegador veremos esos cambios.
        Es como un Apache, un hosting.
        Es donde sirve los archivos por defecto. Se puede cambiar, pero es muy común que se
        despliegue dentro de esta carpeta.

  - Archivo de configuración. Ir a la ruta
      cd /etc/nginx/conf.d
    
    El archivo que me interesa es default.conf

  - Para ver el archivo de configuración default.conf
      cat default.conf
    
    Hay una configuración de servidor que está escuchando por defecto el puerto 80.
    También indica donde se guardan los logs.
    Donde se encuentra la localización del root (/)
    Páginas de error 50x y su localización
    etc.

    Vamos a sobreescribir ciertas configuraciones que se encuentran en este nginx server.
    Estas configuraciones van a ser específicas para la aplicación que necesitamos ejecutar.
    Al montar la imagen de la aplicación React, ya estará lista para ejecutar.

  - Salir con el comando
      exit

  - Ahora si, borrar el contenedor

03 - Construir la imagen de nuestra aplicación
----------------------------------------------
  Necesitamos un hosting para servir archivos html, css, js y assets planos.
  No necesitamos nada del lado del servidor.
  Vamos a usar la imagen de nginx, pero no necesitamos usar una imagen de Express con Node.

  - En nuestro proyecto de React creamos un archivo Dockerfile y el archivo .dockerignore

    Nuestro fichero .dockerignore queda:
      node_modules
      .git
      dist

    Nuestro fichero Dockerfile queda:

FROM node:19-alpine3.15 as dev-deps
WORKDIR /app
COPY package.json package.json
RUN yarn install --frozen-lockfile


FROM node:19-alpine3.15 as builder
WORKDIR /app
COPY --from=dev-deps /app/node_modules ./node_modules
COPY . .
# RUN yarn test
RUN yarn build


FROM nginx:1.23.3 as prod
EXPOSE 80
COPY --from=builder /app/dist /usr/share/nginx/html

CMD [ "nginx", "-g", "daemon off;" ]

  - Vamos a la carpeta de nuestro proyecto para hacer el build de la imagen
    Se indica el no-cache para que haga todos los pasos aunque se suponga que están en cache.
      docker build -t heroes-app . --no-cache

  - Cuando termine podemos ver la imagen creada
      docker image ls

    Y debemos ver nuestra imagen heroes-app

  - Ejecutemos la aplicación usando nuestra imagen
    Vamos a dejar los logs porque me interesa verlos
      docker container run -p 80:80 heroes-app

  - Vamos al navegador web y escribimos
      localhost

  - Pulsamos el botón login y NO VEMOS NUESTRAS IMAGENES
    Además si recargamos el navegador web indica un 404 Not Found

    El 404 lo indica porque no le estamos diciendo a nginx que la aplicación de React que estamos ejecutando
    tiene su propio router.
    En concreto, si accedemos a la ruta /localhost/marvel y recargamos, como NO EXISTE un index.html en esa ruta, está fallando.
    Y funciona si accedemos directamente (sin recargar) a /localhost/marvel porque realmente no hemos salido de /localhost

    Para que todo esto funcione tenemos que hacer una configuración adicional en nginx.

  - Pulsamos Ctrl+C para cancelar la ejecución del contenedor.
  - Borramos el contenedor.
